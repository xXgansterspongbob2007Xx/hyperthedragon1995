{"README.md":"\n> Open this page at [https://jwunderl.github.io/arcade-sprite-util/](https://jwunderl.github.io/arcade-sprite-util/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://arcade.makecode.com/](https://arcade.makecode.com/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/jwunderl/arcade-sprite-util** and import\n\n## Edit this project ![Build status badge](https://github.com/jwunderl/arcade-sprite-util/workflows/MakeCode/badge.svg)\n\nTo edit this repository in MakeCode.\n\n* open [https://arcade.makecode.com/](https://arcade.makecode.com/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/jwunderl/arcade-sprite-util** and click import\n\n## Blocks preview\n\nThis image shows the blocks code from the last commit in master.\nThis image may take a few minutes to refresh.\n\n![A rendered view of the blocks](https://github.com/jwunderl/arcade-sprite-util/raw/master/.github/makecode/blocks.png)\n\n#### Metadata (used for search, rendering)\n\n* for PXT/arcade\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n","docs/add-event-handler.md":"# add event handler\n\nRuns some code before or after a specific step in the game engine's update logic.\n\n```blocks\nspriteutils.addEventHandler(spriteutils.UpdatePriorityModifier.After, spriteutils.UpdatePriority.Update, function () {\n    console.log(\"after update for step \" + index)\n    index += 1\n})\nspriteutils.addEventHandler(spriteutils.UpdatePriorityModifier.Before, spriteutils.UpdatePriority.Update, function () {\n    console.log(\"before update for step \" + index)\n})\nlet index = 0\ngame.onUpdate(function () {\n    console.log(\"on update for step \" + index)\n})\n```","docs/angle-from.md":"# angle from\n\nReturns an angle from one sprite to another **in radians**\n\n```blocks\nlet mySprite = sprites.create(img`\n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . 4 4 . . . . . . . . \n    . . . . 4 4 . . 4 4 . . . . . . \n    . . . 4 . 4 . . . . 4 . . . . . \n    . . 4 . 4 4 . . . . . 4 . . . . \n    . . 4 . 4 . . . . . . 4 . . . . \n    . 4 . . 4 . . . . . . 4 . . . . \n    . 4 . . 4 . . . . . . 4 . . . . \n    . . . . 4 . . . . . 4 . . . . . \n    . . . . . 4 4 . 4 4 4 . . . . . \n    . . . . . . 4 4 4 . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    `, SpriteKind.Player)\nlet myEnemy = sprites.create(img`\n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . 3 3 . . . . . . . . \n    . . . . 3 3 . . 3 3 . . . . . . \n    . . . 3 . 3 . . . . 3 . . . . . \n    . . 3 . 3 3 . . . . . 3 . . . . \n    . . 3 . 3 . . . . . . 3 . . . . \n    . 3 . . 3 . . . . . . 3 . . . . \n    . 3 . . 3 . . . . . . 3 . . . . \n    . . . . 3 . . . . . 3 . . . . . \n    . . . . . 3 3 . 3 3 3 . . . . . \n    . . . . . . 3 3 3 . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    `, SpriteKind.Player)\nmyEnemy.setPosition(156, 112)\nconsole.log(spriteutils.angleFrom(mySprite, myEnemy))\n```\n\n```package\nspriteutils=github:jwunderl/arcade-sprite-util\n```","docs/create-renderable.md":"# Create renderable\n\nCreate a renderable that draws to the screen each frame at a given index\n\n```blocks\nspriteutils.createRenderable(20, function (target) {\n    target.drawLine(20, 20, 140, 100, 5)\n})\n```\n\n```package\nspriteutils=github:jwunderl/arcade-sprite-util\n```","docs/degrees-to-radians.md":"# degrees to radians\n\nConverts a number from degrees to radians\n\n```blocks\nconsole.log(spriteutils.degreesToRadians(360))\n```\n\n```package\nspriteutils=github:jwunderl/arcade-sprite-util\n```","docs/distance-between.md":"# distance between\n\nReturns the distance between the center of two sprites in pixels\n\n```blocks\nlet mySprite = sprites.create(img`\n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . 4 4 . . . . . . . . \n    . . . . 4 4 . . 4 4 . . . . . . \n    . . . 4 . 4 . . . . 4 . . . . . \n    . . 4 . 4 4 . . . . . 4 . . . . \n    . . 4 . 4 . . . . . . 4 . . . . \n    . 4 . . 4 . . . . . . 4 . . . . \n    . 4 . . 4 . . . . . . 4 . . . . \n    . . . . 4 . . . . . 4 . . . . . \n    . . . . . 4 4 . 4 4 4 . . . . . \n    . . . . . . 4 4 4 . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    `, SpriteKind.Player)\nlet myEnemy = sprites.create(img`\n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . 3 3 . . . . . . . . \n    . . . . 3 3 . . 3 3 . . . . . . \n    . . . 3 . 3 . . . . 3 . . . . . \n    . . 3 . 3 3 . . . . . 3 . . . . \n    . . 3 . 3 . . . . . . 3 . . . . \n    . 3 . . 3 . . . . . . 3 . . . . \n    . 3 . . 3 . . . . . . 3 . . . . \n    . . . . 3 . . . . . 3 . . . . . \n    . . . . . 3 3 . 3 3 3 . . . . . \n    . . . . . . 3 3 3 . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    `, SpriteKind.Player)\nmyEnemy.setPosition(156, 112)\nconsole.log(spriteutils.distanceBetween(mySprite, myEnemy))\n```\n\n```package\nspriteutils=github:jwunderl/arcade-sprite-util\n```","docs/draw-circle.md":"# Draw circle\n\nDraws a circle onto an image, with the x and y set to the top left corner of the source image\n\n```blocks\nspriteutils.createRenderable(20, function (target) {\n    spriteutils.drawCircle(target, 50, 50, 10, 4);\n});\n```\n\n```package\nspriteutils=github:jwunderl/arcade-sprite-util\n```","docs/draw-transparent-image.md":"# Draw transparent image\n\nDraws an image onto another image, with the x and y set to the top left corner of the source image\n\n```blocks\nspriteutils.createRenderable(20, function (target) {\n    spriteutils.drawTransparentImage(img`\n        . . . . . . . 6 . . . . . . . . \n        . . . . . . 8 6 6 . . . 6 8 . . \n        . . . e e e 8 8 6 6 . 6 7 8 . . \n        . . e 2 2 2 2 e 8 6 6 7 6 . . . \n        . e 2 2 4 4 2 7 7 7 7 7 8 6 . . \n        . e 2 4 4 2 6 7 7 7 6 7 6 8 8 . \n        e 2 4 5 2 2 6 7 7 6 2 7 7 6 . . \n        e 2 4 4 2 2 6 7 6 2 2 6 7 7 6 . \n        e 2 4 2 2 2 6 6 2 2 2 e 7 7 6 . \n        e 2 4 2 2 4 2 2 2 4 2 2 e 7 6 . \n        e 2 4 2 2 2 2 2 2 2 2 2 e c 6 . \n        e 2 2 2 2 2 2 2 4 e 2 e e c . . \n        e e 2 e 2 2 4 2 2 e e e c . . . \n        e e e e 2 e 2 2 e e e c . . . . \n        e e e 2 e e c e c c c . . . . . \n        . c c c c c c c . . . . . . . . \n    `, target, 50, 50);\n});\n```\n\n```package\nspriteutils=github:jwunderl/arcade-sprite-util\n```","docs/fill-circle.md":"# Fill circle\n\nDraws a filled circle onto another image, with the x and y set to the top left corner of the source image\n\n```blocks\nspriteutils.createRenderable(20, function (target) {\n    spriteutils.fillCircle(target, 50, 50, 10, 4);\n});\n```\n\n```package\nspriteutils=github:jwunderl/arcade-sprite-util\n```","docs/get-sprites-within.md":"# Get Sprites Within\n\nReturns an array of all sprites of kind that are within the given distance from a sprite. The array will also be sorted from closest sprite to farthest\n\n```blocks\nlet new_test_subject: Sprite = null\nlet circle = sprites.create(img`\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    ....................................................................................................\n    `, SpriteKind.Player)\nspriteutils.drawCircle(\ncircle.image,\n50,\n50,\n50,\n3\n)\nfor (let index = 0; index <= 7; index++) {\n    new_test_subject = sprites.create(assets.image`test subject`, SpriteKind.Enemy)\n    new_test_subject.setPosition(randint(0, 160), randint(0, 120))\n}\nlet mySprite = sprites.create(assets.image`smiley`, SpriteKind.Player)\ncontroller.moveSprite(mySprite)\ngame.onUpdate(function () {\n    circle.setPosition(mySprite.x, mySprite.y)\n})\ngame.onUpdate(function () {\n    mySprite.say(spriteutils.getSpritesWithin(SpriteKind.Enemy, 50, mySprite).length)\n    for (let value of spriteutils.getSpritesWithin(SpriteKind.Enemy, 50, mySprite)) {\n        value.say(\":)\", 100)\n    }\n})\n\n```\n\n\n```package\nspriteutils=github:jwunderl/arcade-sprite-util\n```","docs/is-destroyed.md":"# is destroyed\n\nReturns true if the given sprite is destroyed or does not exist.\n\n```blocks\nlet mySprite = sprites.create(img`\n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . 4 4 . . . . . . . . \n    . . . . 4 4 . . 4 4 . . . . . . \n    . . . 4 . 4 . . . . 4 . . . . . \n    . . 4 . 4 4 . . . . . 4 . . . . \n    . . 4 . 4 . . . . . . 4 . . . . \n    . 4 . . 4 . . . . . . 4 . . . . \n    . 4 . . 4 . . . . . . 4 . . . . \n    . . . . 4 . . . . . 4 . . . . . \n    . . . . . 4 4 . 4 4 4 . . . . . \n    . . . . . . 4 4 4 . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    `, SpriteKind.Player)\nmySprite.destroy()\nif (spriteutils.isDestroyed(mySprite)) {\n    game.splash(\"mySprite is destroyed :(\")\n}\n```\n\n```package\nspriteutils=github:jwunderl/arcade-sprite-util\n```\n","docs/place-angle-from.md":"# place angle from\n\nPlaces a sprite (spriteToMove) a given distance away from the other sprite (fromSprite), at the provided angle (in radians).\n\n```blocks\ncontroller.A.onEvent(ControllerButtonEvent.Pressed, function () {\n    spriteutils.placeAngleFrom(\n    myEnemy,\n    spriteutils.angleFrom(mySprite, myEnemy),\n    spriteutils.distanceBetween(mySprite, myEnemy) * 1.25,\n    mySprite\n    )\n})\nlet myEnemy: Sprite = null\nlet mySprite: Sprite = null\nmySprite = sprites.create(img`\n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . 4 4 . . . . . . . . \n    . . . . 4 4 . . 4 4 . . . . . . \n    . . . 4 . 4 . . . . 4 . . . . . \n    . . 4 . 4 4 . . . . . 4 . . . . \n    . . 4 . 4 . . . . . . 4 . . . . \n    . 4 . . 4 . . . . . . 4 . . . . \n    . 4 . . 4 . . . . . . 4 . . . . \n    . . . . 4 . . . . . 4 . . . . . \n    . . . . . 4 4 . 4 4 4 . . . . . \n    . . . . . . 4 4 4 . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    `, SpriteKind.Player)\nmyEnemy = sprites.create(img`\n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . 3 3 . . . . . . . . \n    . . . . 3 3 . . 3 3 . . . . . . \n    . . . 3 . 3 . . . . 3 . . . . . \n    . . 3 . 3 3 . . . . . 3 . . . . \n    . . 3 . 3 . . . . . . 3 . . . . \n    . 3 . . 3 . . . . . . 3 . . . . \n    . 3 . . 3 . . . . . . 3 . . . . \n    . . . . 3 . . . . . 3 . . . . . \n    . . . . . 3 3 . 3 3 3 . . . . . \n    . . . . . . 3 3 3 . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    `, SpriteKind.Player)\nmyEnemy.setPosition(100, 70)\nconsole.log(spriteutils.angleFrom(mySprite, myEnemy))\n```\n\n```package\nspriteutils=github:jwunderl/arcade-sprite-util\n```","docs/radians-to-degrees.md":"# radians to degrees\n\nConverts a number from radians to degrees\n\n```blocks\nconsole.log(spriteutils.radiansToDegrees(3.1415926535897932384))\n```\n\n```package\nspriteutils=github:jwunderl/arcade-sprite-util\n```","docs/round-with-precision.md":"# round With Precision\n\nReturns a string of (x) rounded to the given number of decimal places.\n\n```blocks\nfor (let i = 0; i < 5; i++) {\n    console.log(spriteutils.roundWithPrecision(3.141592653589793238462, i))\n}\n```\n\n```package\nspriteutils=github:jwunderl/arcade-sprite-util\n```","docs/set-console-overlay.md":"# set console overlay\n\nSet whether the console should be displayed on the screen (on) or not (off).\n\n```blocks\nspriteutils.setConsoleOverlay(true);\nconsole.log(\"Hello!!\");\n```\n\n```package\nspriteutils=github:jwunderl/arcade-sprite-util\n```","docs/set-life-image.md":"# set life image\n\nSet the icon for displaying remaining lives\n\n```blocks\nspriteutils.setLifeImage(img`\n    . . . . . . . \n    5 5 5 . 5 5 5 \n    5 5 5 5 5 5 5 \n    5 5 5 5 5 5 5 \n    5 5 5 5 5 5 5 \n    5 5 5 5 5 5 5 \n    . 5 5 5 5 5 . \n    . . 5 5 5 5 . \n`)\ngame.onUpdateInterval(1000, () => {\n    info.setLife(randint(0, 500))\n})\n```\n\n```package\nspriteutils=github:jwunderl/arcade-sprite-util\n```","docs/set-velocity-at-angle.md":"# set velocity at angle\n\nSets the velocity of the given sprite to be at a given speed at the given angle (in radians)\n\n```blocks\ncontroller.A.onEvent(ControllerButtonEvent.Pressed, function () {\n    spriteutils.setVelocityAtAngle(\n    myEnemy,\n    spriteutils.angleFrom(mySprite, myEnemy),\n    spriteutils.distanceBetween(mySprite, myEnemy) * 1.25\n    )\n})\nlet myEnemy: Sprite = null\nlet mySprite: Sprite = null\nmySprite = sprites.create(img`\n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . 4 4 . . . . . . . . \n    . . . . 4 4 . . 4 4 . . . . . . \n    . . . 4 . 4 . . . . 4 . . . . . \n    . . 4 . 4 4 . . . . . 4 . . . . \n    . . 4 . 4 . . . . . . 4 . . . . \n    . 4 . . 4 . . . . . . 4 . . . . \n    . 4 . . 4 . . . . . . 4 . . . . \n    . . . . 4 . . . . . 4 . . . . . \n    . . . . . 4 4 . 4 4 4 . . . . . \n    . . . . . . 4 4 4 . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    `, SpriteKind.Player)\nmyEnemy = sprites.create(img`\n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . 3 3 . . . . . . . . \n    . . . . 3 3 . . 3 3 . . . . . . \n    . . . 3 . 3 . . . . 3 . . . . . \n    . . 3 . 3 3 . . . . . 3 . . . . \n    . . 3 . 3 . . . . . . 3 . . . . \n    . 3 . . 3 . . . . . . 3 . . . . \n    . 3 . . 3 . . . . . . 3 . . . . \n    . . . . 3 . . . . . 3 . . . . . \n    . . . . . 3 3 . 3 3 3 . . . . . \n    . . . . . . 3 3 3 . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    `, SpriteKind.Player)\nmyEnemy.setPosition(100, 70)\nconsole.log(spriteutils.angleFrom(mySprite, myEnemy))\n```\n\n```package\nspriteutils=github:jwunderl/arcade-sprite-util\n```","pxt.json":"{\n    \"name\": \"arcade-sprite-util\",\n    \"version\": \"0.2.6\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\",\n        \"hw---samd51\": \"*\"\n    },\n    \"files\": [\n        \"README.md\",\n        \"spriteutils.ts\",\n        \"docs/radians-to-degrees.md\",\n        \"docs/degrees-to-radians.md\",\n        \"docs/set-console-overlay.md\",\n        \"docs/create-renderable.md\",\n        \"docs/is-destroyed.md\",\n        \"docs/distance-between.md\",\n        \"docs/angle-from.md\",\n        \"docs/place-angle-from.md\",\n        \"docs/set-velocity-at-angle.md\",\n        \"docs/draw-transparent-image.md\",\n        \"docs/set-life-image.md\",\n        \"docs/draw-circle.md\",\n        \"docs/round-with-precision.md\",\n        \"docs/fill-circle.md\",\n        \"docs/get-sprites-within.md\",\n        \"docs/add-event-handler.md\"\n    ],\n    \"testFiles\": [\n        \"test.ts\"\n    ],\n    \"public\": true,\n    \"targetVersions\": {\n        \"target\": \"1.8.29\",\n        \"targetId\": \"arcade\"\n    },\n    \"supportedTargets\": [\n        \"arcade\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n","spriteutils.ts":"/**\n * Utility blocks for sprites\n */\n//% weight=99 color=\"#4B7BEC\" icon=\"\\uf2bd\"\n//% block=\"Sprite Utils\"\n//% groups='[\"Sprite\", \"General\"]'\nnamespace spriteutils {\n    export enum NullConsts {\n        //% block=\"undefined\"\n        Undefined,\n        //% block=\"null\"\n        Null,\n    }\n\n    export enum Consts {\n        //% block=\"undefined\" blockHidden=1\n        Undefined,\n        //% block=\"null\" blockHidden=1\n        Null,\n        //% block=\"NaN\"\n        NaN,\n        //% block=\"π\"\n        Pi,\n        //% block=\"e\"\n        E,\n        //% block=\"LN2\"\n        LN2,\n        //% block=\"LN10\"\n        LN10,\n        //% block=\"√1/2\"\n        SQRT1_2,\n        //% block=\"√2\"\n        SQRT2\n    }\n    export enum UpdatePriority {\n        //% block=\"updates the controller\"\n        Controller = scene.CONTROLLER_PRIORITY,\n        //% block=\"updates the controller extension\"\n        UpdateController = scene.UPDATE_CONTROLLER_PRIORITY,\n        //% block=\"updates following sprites\"\n        FollowSprite = scene.FOLLOW_SPRITE_PRIORITY,\n        //% block=\"updates controller sprites\"\n        ControllerSprites = scene.CONTROLLER_SPRITES_PRIORITY,\n        //% block=\"runs physics\"\n        Physics = scene.PHYSICS_PRIORITY,\n        //% block=\"updates animations\"\n        Animation = scene.ANIMATION_UPDATE_PRIORITY,\n        //% block=\"runs on game update interval\"\n        UpdateInterval = scene.UPDATE_INTERVAL_PRIORITY,\n        //% block=\"runs on game update\"\n        Update = scene.UPDATE_PRIORITY,\n        //% block=\"updates the camera\"\n        Camera = scene.PRE_RENDER_UPDATE_PRIORITY,\n        //% block=\"renders background image\"\n        RenderBackground = scene.RENDER_BACKGROUND_PRIORITY,\n        //% block=\"renders all sprites\"\n        RenderSprites = scene.RENDER_SPRITES_PRIORITY,\n        //% block=\"renders diagnostics\"\n        RenderDiagnostics = scene.RENDER_DIAGNOSTICS_PRIORITY,\n        //% block=\"updates the screen\"\n        UpdateScreen = scene.UPDATE_SCREEN_PRIORITY\n    }\n\n    export enum UpdatePriorityModifier {\n        //% block=\"before\"\n        Before,\n        //% block=\"after\"\n        After\n    }\n\n    /**\n     * Returns true if the given sprite does not exist,\n     * or is destroyed, and false otherwise.\n     */\n    //% block=\"$sprite is destroyed\"\n    //% blockId=spriteutilextisdestroyed\n    //% help=github:arcade-sprite-util/docs/is-destroyed\n    //% sprite.shadow=variables_get\n    //% sprite.defl=mySprite\n    //% weight=100\n    //% group=Sprite\n    export function isDestroyed(sprite: Sprite): boolean {\n        return !sprite || !!(sprite.flags & sprites.Flag.Destroyed);\n    }\n\n    /**\n     * Returns the distance between the center of two sprites in pixels.\n     * If either sprite is undefined returns 0.\n     */\n    //% block=\"distance between $a and $b\"\n    //% blockId=spriteutilextdistbw\n    //% help=github:arcade-sprite-util/docs/distance-between\n    //% a.shadow=variables_get\n    //% a.defl=mySprite\n    //% b.shadow=variables_get\n    //% b.defl=myEnemy\n    //% weight=90\n    //% group=Sprite\n    export function distanceBetween(a: Sprite, b: Sprite): number {\n        if (!a || !b) return 0;\n        return Math.sqrt(((a.x - b.x) ** 2) + ((a.y - b.y) ** 2));\n    }\n\n    /**\n     * Returns array of sprites of kind that are within a specified distance.\n     */\n    //% block=\"get all sprites of kind $kind within $distance pixels from $sprite\"\n    //% kind.shadow=spritekind\n    //% distance.defl=50\n    //% sprite.shadow=variables_get\n    //% sprite.defl=mySprite\n    //% weight=85\n    //% group=Sprite\n    export function getSpritesWithin(kind: number, distance: number, sprite: Sprite): Sprite[] {\n        let allSprites = sprites.allOfKind(kind);\n        let numItems = 0;\n        let sortArray = allSprites.filter(function(value: Sprite, index: number) {\n            return distanceBetween(value, sprite) <= distance;\n        })\n\n        sortArray = sortArray.sort((a, b)=>{\n            return (distanceBetween(a, sprite) - distanceBetween(b, sprite));\n        })\n\n        return sortArray;\n    }\n\n    /**\n     * Returns the angle between the center of two sprites in radians.\n     * If either sprite is undefined returns 0.\n     */\n    //% block=\"angle from $a to $b\"\n    //% blockId=spriteutilextanglebw\n    //% help=github:arcade-sprite-util/docs/angle-from\n    //% a.shadow=variables_get\n    //% a.defl=mySprite\n    //% b.shadow=variables_get\n    //% b.defl=myEnemy\n    //% weight=80\n    //% group=Sprite\n    export function angleFrom(a: Sprite, b: Sprite): number {\n        if (!a || !b) return 0;\n        return Math.atan2(\n            b.y - a.y,\n            b.x - a.x\n        );\n    }\n\n    /**\n     * Places a sprite (spriteToMove) a given distance away from the other sprite (fromSprite),\n     * at the provided angle\n     */\n    //% block=\"place $spriteToMove angle $angleInRadians distance $distance from $fromSprite\"\n    //% blockId=spriteutilextplaceanglefrom\n    //% help=github:arcade-sprite-util/docs/place-angle-from\n    //% fromSprite.shadow=variables_get\n    //% fromSprite.defl=mySprite\n    //% spriteToMove.shadow=variables_get\n    //% spriteToMove.defl=myEnemy\n    //% weight=70\n    //% group=Sprite\n    export function placeAngleFrom(spriteToMove: Sprite, angleInRadians: number, distance: number, fromSprite: Sprite) {\n        if (!fromSprite || !spriteToMove)\n            return;\n\n        spriteToMove.setPosition(\n            fromSprite.x + Math.cos(angleInRadians) * distance,\n            fromSprite.y + Math.sin(angleInRadians) * distance\n        );\n    }\n\n    /**\n     * Sets the velocity of the given sprite to be at a given speed in the given direction\n     */\n    //% block=\"set $target velocity at angle $angleInRadians speed $speed\"\n    //% blockId=spriteutilextsetspeedanglefrom\n    //% help=github:arcade-sprite-util/docs/set-velocity-at-angle\n    //% target.shadow=variables_get\n    //% target.defl=mySprite\n    //% weight=60\n    //% group=Sprite\n    export function setVelocityAtAngle(target: Sprite, angleInRadians: number, speed: number) {\n        if (!target)\n            return;\n\n        target.setVelocity(\n            Math.cos(angleInRadians) * speed,\n            Math.sin(angleInRadians) * speed\n        );\n    }\n\n    /**\n     * Converts a number from radians to degrees\n     */\n    //% block=\"convert $asRadians radians to degrees\"\n    //% blockId=spriteutilextradtodeg\n    //% help=github:arcade-sprite-util/docs/radians-to-degrees\n    //% weight=80\n    //% group=General\n    export function radiansToDegrees(asRadians: number): number {\n        return asRadians * 180 / Math.PI;\n    }\n\n    /**\n     * Converts a number from degrees to radians\n     */\n    //% block=\"convert $asDegrees degrees to radians\"\n    //% blockId=spriteutilextdegtorad\n    //% help=github:arcade-sprite-util/docs/degrees-to-radians\n    //% weight=80\n    //% group=General\n    export function degreesToRadians(asDegrees: number): number {\n        return asDegrees * Math.PI / 180;\n    }\n\n    /**\n     * Create a renderable that draws on the screen every frame\n     */\n    //% block=\"render on z-index $index to $screen\"\n    //% blockId=spriteutilextcreaterenderable\n    //% help=github:arcade-sprite-util/docs/create-renderable\n    //% draggableParameters=\"reporter\"\n    //% blockAllowMultiple=1\n    //% weight=70\n    //% group=General\n    export function createRenderable(index: number, handler: (screen: Image) => void) {\n        scene.createRenderable(index, handler);\n    }\n\n    /**\n     * Draw an image (src) onto the target (to), with the top left at (x, y)\n     */\n    //% block=\"draw $src to $to at x $x y $y\"\n    //% blockId=spriteutilextdrawtransparentimg\n    //% src.shadow=screen_image_picker\n    //% to.shadow=variables_get\n    //% to.defl=myImage\n    //% x.shadow=\"positionPicker\"\n    //% y.shadow=\"positionPicker\"\n    //% help=github:arcade-sprite-util/docs/draw-transparent-image\n    //% weight=65\n    //% group=General\n    //% inlineInputMode=inline\n    export function drawTransparentImage(src: Image, to: Image, x: number, y: number) {\n        if (!src || !to) {\n            return;\n        }\n        to.drawTransparentImage(src, x, y);\n    }\n\n    /**\n     * Draw a circle centered at (cx, cy) with radius r of the given color\n     */\n    //% block=\"draw circle in $to at cx $cx cy $cy radius $r color $col\"\n    //% blockId=spriteutilextdrawcircle\n    //% to.shadow=variables_get\n    //% to.defl=myImage\n    //% col.shadow=colorindexpicker\n    //% col.defl=3\n    //% cx.min=0 cx.max=160 cx.defl=80\n    //% cy.min=0 cy.max=120 cy.defl=60\n    //% r.min=0 r.max=40 r.defl=5\n    //% help=github:arcade-sprite-util/docs/draw-circle\n    //% weight=64\n    //% group=General\n    export function drawCircle(to: Image, cx: number, cy: number, r: number, col: number) {\n        if (!to) {\n            return;\n        }\n        to.drawCircle(cx, cy, r, col);\n    }\n\n    /**\n     * Draw a filled circle centered at (cx, cy) with radius r of the given color\n     */\n    //% block=\"fill circle in $to at cx $cx cy $cy radius $r color $col\"\n    //% blockId=spriteutilextdrawfilledcircle\n    //% to.shadow=variables_get\n    //% to.defl=myImage\n    //% col.shadow=colorindexpicker\n    //% col.defl=3\n    //% cx.min=0 cx.max=160 cx.defl=80\n    //% cy.min=0 cy.max=120 cy.defl=60\n    //% r.min=0 r.max=40 r.defl=5\n    //% help=github:arcade-sprite-util/docs/fill-circle\n    //% weight=63\n    //% group=General\n    export function fillCircle(to: Image, cx: number, cy: number, r: number, col: number) {\n        if (!to) {\n            return;\n        }\n        to.fillCircle(cx, cy, r, col);\n    }\n\n\n    /**\n     * Set whether the console will be displayed on the screen (on) or not (off)\n     */\n    //% block=\"console overlay $on\"\n    //% on.shadow=toggleOnOff\n    //% blockId=spriteutilextsetconsolevisible\n    //% help=github:arcade-sprite-util/docs/set-console-overlay\n    //% weight=60\n    //% group=General\n    export function setConsoleOverlay(on: boolean) {\n        game.consoleOverlay.setVisible(on);\n    }\n\n    /**\n     * Set the icon used to display life\n     */\n    //% block=\"set life image $im\"\n    //% blockId=spriteutilextsetlifeimage\n    //% im.shadow=life_image_picker\n    //% help=github:arcade-sprite-util/docs/set-life-image\n    //% weight=55\n    //% group=General\n    export function setLifeImage(im: Image) {\n        info.setLifeImage(im);\n    }\n\n    //% blockId=life_image_picker block=\"%img\"\n    //% shim=TD_ID\n    //% img.fieldEditor=\"sprite\"\n    //% img.fieldOptions.taggedTemplate=\"img\"\n    //% img.fieldOptions.decompileIndirectFixedInstances=\"true\"\n    //% img.fieldOptions.sizes=\"7,8\"\n    //% img.fieldOptions.filter=\"!dialog !background\"\n    //% weight=100 group=\"Create\"\n    //% blockHidden=1 duplicateShadowOnDrag\n    export function _lifeImage(img: Image) {\n        return img;\n    }\n\n    //% blockId=spriteutilextroundwithprecision\n    //% block=\"round $x to $digitsAfterDecimal decimal places\"\n    //% x.defl=3.14159\n    //% digitsAfterDecimal.defl=2\n    //% weight=50\n    //% group=General\n    //% help=github:arcade-sprite-util/docs/round-with-precision\n    export function roundWithPrecision(x: number, digitsAfterDecimal: number): string {\n        let rounded = \"\" + Math.roundWithPrecision(x, digitsAfterDecimal);\n        if (digitsAfterDecimal > 0) {\n            const indDec = rounded.indexOf(\".\");\n            let padZeros = 0;\n            if (indDec === -1) {\n                padZeros = digitsAfterDecimal;\n                rounded += \".\";\n            } else {\n                const currDecimals = rounded.length - 1 - indDec;\n                if (currDecimals > digitsAfterDecimal) {\n                    rounded = rounded.slice(0, indDec + 1 + digitsAfterDecimal);\n                } else if (currDecimals < digitsAfterDecimal) {\n                    padZeros = digitsAfterDecimal - currDecimals;\n                }\n            }\n            for (let i = 0; i < padZeros; ++i) {\n                rounded += \"0\";\n            }\n        }\n        return rounded;\n    }\n\n    //% blockId=spriteutiladdeventhandler\n    //% block=\"run code $modifier game engine $priority\"\n    //% group=General\n    //% weight=10\n    //% help=github:arcade-sprite-util/docs/add-event-handler\n    export function addEventHandler(modifier: UpdatePriorityModifier, priority: UpdatePriority, callback: () => void) {\n        const handlerPriority = priority + (modifier === UpdatePriorityModifier.Before ? -0.5 : 0.5);\n        game.currentScene().eventContext.registerFrameHandler(handlerPriority, callback);\n    }\n\n\n\n    /**\n     * TODO: add help docs\n     * pixels > 0\n     */\n    //% blockId=spriteutiljumpimpulse\n    //% block=\"make $sprite jump $pixels pixels\"\n    //% pixels.defl=34\n    //% pixels.min=0\n    //% pixels.max=120\n    //% sprite.shadow=variables_get\n    //% sprite.defl=mySprite\n    //% group=Sprite\n    //% weight=70\n    export function jumpImpulse(sprite: Sprite, pixels: number) {\n        const g = Math.abs(sprite.ay) || 200;\n        const dir = sprite.ay > 0 ? -1 : 1;\n        sprite.vy = dir * Math.sqrt(2 * Math.abs(pixels) * g);\n    }\n\n    /**\n     * TODO: add help docs\n     */\n    //% blockId=spriteutilmathconsts\n    //% block=\"$constType\"\n    //% group=\"General\"\n    //% weight=10\n    export function consts(constType: spriteutils.Consts): number {\n        switch (constType) {\n            case Consts.Undefined: return undefined;\n            case Consts.Null: return null;\n            case Consts.NaN: return NaN;\n            case Consts.Pi: return Math.PI;\n            case Consts.E: return Math.E;\n            case Consts.LN2: return Math.LN2;\n            case Consts.LN10: return Math.LN10;\n            case Consts.SQRT1_2: return Math.SQRT1_2;\n            case Consts.SQRT2: return Math.SQRT2;\n            default: return 0;\n        }\n    }\n\n    /**\n     * TODO: add help docs\n     */\n    //% blockId=spriteutilnullconsts\n    //% block=\"$constType\"\n    //% group=\"General\"\n    //% weight=10\n    export function nullConsts(constType: spriteutils.NullConsts): undefined {\n        switch (constType) {\n            case NullConsts.Undefined: return undefined;\n            case NullConsts.Null: return null;\n            default: return null;\n        }\n    }\n\n}\n","test.ts":"spriteutils.createRenderable(20, function (target) {\n    d = spriteutils.distanceBetween(mySprite, myEnemy)\n    a = spriteutils.angleFrom(mySprite, myEnemy)\n    target.drawLine(mySprite.x, mySprite.y, mySprite.x + Math.cos(a) * d, mySprite.y + Math.sin(a) * d, 5)\n})\nlet a = 0\nlet d = 0\nlet myEnemy: Sprite = null\nlet mySprite: Sprite = null\nmySprite = sprites.create(img`\n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . 4 4 . . . . . . . . \n    . . . . 4 4 . . 4 4 . . . . . . \n    . . . 4 . 4 . . . . 4 . . . . . \n    . . 4 . 4 4 . . . . . 4 . . . . \n    . . 4 . 4 . . . . . . 4 . . . . \n    . 4 . . 4 . . . . . . 4 . . . . \n    . 4 . . 4 . . . . . . 4 . . . . \n    . . . . 4 . . . . . 4 . . . . . \n    . . . . . 4 4 . 4 4 4 . . . . . \n    . . . . . . 4 4 4 . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    `, SpriteKind.Player)\nmyEnemy = sprites.create(img`\n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . 3 3 . . . . . . . . \n    . . . . 3 3 . . 3 3 . . . . . . \n    . . . 3 . 3 . . . . 3 . . . . . \n    . . 3 . 3 3 . . . . . 3 . . . . \n    . . 3 . 3 . . . . . . 3 . . . . \n    . 3 . . 3 . . . . . . 3 . . . . \n    . 3 . . 3 . . . . . . 3 . . . . \n    . . . . 3 . . . . . 3 . . . . . \n    . . . . . 3 3 . 3 3 3 . . . . . \n    . . . . . . 3 3 3 . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    `, SpriteKind.Player)\nmyEnemy.setPosition(156, 112)\n\nmyEnemy.say(spriteutils.roundWithPrecision(16 / 3, 5))\ncontroller.moveSprite(myEnemy)\n\ncontroller.A.onEvent(ControllerButtonEvent.Pressed, () => {\n    const myProjectile = sprites.create(img`\n        . . . . . . . . . . . . . . . .\n        . 3 . . . . . . . . . . . . 3 .\n        . . 3 . . . . . . . . . 3 3 . .\n        . . . 3 . . . . . . . 3 . . . .\n        . . . . 3 3 . . . 3 3 . . . . .\n        . . . . . . 3 . 3 . . . . . . .\n        . . . . . . . 3 . . . . . . . .\n        . . . . . . 3 . 3 . . . . . . .\n        . . . . . 3 3 . . 3 . . . . . .\n        . . . . . 3 . . . . 3 3 . . . .\n        . . . . 3 . . . . . . . 3 3 . .\n        . . . 3 3 . . . . . . . . . 3 .\n        . . . 3 . . . . . . . . . . 3 .\n        . . . . . . . . . . . . . . . 3\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n    `, SpriteKind.Player);\n    myProjectile.setFlag(SpriteFlag.AutoDestroy, true);\n    spriteutils.placeAngleFrom(myProjectile, 0, 0, mySprite);\n    d = spriteutils.distanceBetween(mySprite, myEnemy)\n    a = spriteutils.angleFrom(mySprite, myEnemy)\n    spriteutils.setVelocityAtAngle(myProjectile, a, d)\n})\nfunction testRoundWPrecision(inp: number, roundTo: number, expected: string) {\n    // console.log(\"\" +inp + \", \" + \"\")\n    const res = spriteutils.roundWithPrecision(inp, roundTo);\n    console.log(`rwp(${inp}, ${roundTo}): ${res}`);\n    console.log(res == expected ? \"worked\" : `does not match expected ${expected}`);\n}\nlet consoleVisible = true;\ngame.consoleOverlay.setVisible(consoleVisible);\ntestRoundWPrecision(3.14159, 2, \"3.14\");\ntestRoundWPrecision(3.14159, 5, \"3.14159\");\ntestRoundWPrecision(3.1, 2, \"3.10\");\ntestRoundWPrecision(3, 2, \"3.00\");\ntestRoundWPrecision(3.1, 15, \"3.100000000000000\");\ncontroller.B.onEvent(ControllerButtonEvent.Pressed, () => {\n    consoleVisible = !consoleVisible;\n    game.consoleOverlay.setVisible(consoleVisible)\n})"}